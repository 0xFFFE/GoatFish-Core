version: "3.5"

services:

  # Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181
    networks:
      - goatFish_backend
  
  kafka:
    image: wurstmeister/kafka:latest
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - target: 9094
        published: 9094
        protocol: tcp
        mode: host
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka"
      KAFKA_ADVERTISED_PORT: "9092"
      KAFKA_CREATE_TOPICS: "backtest:1:1, requestState:1:1, bitmexPriceStream:1:1, positions:1:1, margin:1:1, orders:1:1, leverage:1:1"
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://_{HOSTNAME_COMMAND}:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:delegated
    networks:
      - goatFish_backend

  # Database
  postgres:
    image: postgres:10-alpine
    restart: always
    container_name: postgres
    ports:
      - 5432
    volumes:
      - ./postgres/data:/var/lib/postgresql/data:delegated
      - ./postgres/scripts:/docker-entrypoint-initdb.d:delegated
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - goatFish_backend

  dbadmin:
    image: adminer
    restart: always
    container_name: postgres_admin
    ports:
      - 8002:8080
    networks:
      - goatFish_backend  

  # APIs
  exchange_engine:
    build: ./exchange_engine/api
    image: exchange_engine
    restart: always
    container_name: exchange_engine
    external_links:
      - bot_manager
      - mocha_test
    depends_on:
      - postgres
      - kafka
    ports:
      - ${EXCHANGESPORT}:3003
    env_file:
      - ./.env
    networks:
      - goatFish_backend
    volumes:
      - ./exchange_engine/api/WebSocket.js:/usr/src/app/node_modules/bitmex-realtime-api/lib/ReconnectingSocket.js:delegated
      - utils:/usr/src/app/utils:delegated
      - database:/usr/src/app/utils/database:delegated
      - /var/run/docker.sock:/var/run/docker.sock
  
  bot_manager:
    build: ./bot_manager/api
    image: bot_manager
    restart: always
    container_name: bot_manager
    external_links:
      - exchange_engine
      - mocha_test
    depends_on:
      - postgres
      - kafka
    ports:
      - ${BOTSPORT}:3002
    env_file:
      - ./.env
    networks:
      - goatFish_backend
    volumes:
      - ./bot_manager/api/strategies:/usr/src/app/strategies
      - utils:/usr/src/app/utils:delegated
      - database:/usr/src/app/utils/database:delegated
      - /var/run/docker.sock:/var/run/docker.sock
    
  strategy_baseline:
    image: strategy_baseline
    build:
      context: ./strategy_baseline/api
    restart: always
    container_name: strategy_baseline
    networks:
      - goatFish_backend
    volumes:
      - ./bot_manager/api/strategies:/usr/src/app/strategies
      - utils:/usr/src/app/utils:delegated
      - database:/usr/src/app/utils/database:delegated
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  database:
    name: database
    driver: local
    driver_opts:
      type: none
      device: "$PWD/utils/database"
      o: bind   
  utils:
    name: utils
    driver: local
    driver_opts:
      type: none
      device: "$PWD/utils"
      o: bind

networks:
  goatFish_backend:
    external: true
